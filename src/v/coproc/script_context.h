/*
 * Copyright 2020 Vectorized, Inc.
 *
 * Use of this software is governed by the Business Source License
 * included in the file licenses/BSL.md
 *
 * As of the Change Date specified in that file, in accordance with
 * the Business Source License, use of this software will be governed
 * by the Apache License, Version 2.0
 */

#pragma once

#include "coproc/pacemaker_context.h"
#include "coproc/scheduled_task.h"
#include "coproc/types.h"
#include "utils/mutex.h"

#include <seastar/core/abort_source.hh>
#include <seastar/core/shared_ptr.hh>
#include <seastar/core/weak_ptr.hh>

namespace coproc {

/**
 * The script_context is the smallest schedulable unit in the coprocessor
 * framework. One context is created per registered coprocessor script,
 * representing one fiber.
 *
 * Important to note is the level of concurrency provided. Within a
 * script_context there is one fiber for which scheduled asynchronous work is
 * performed in sync, meaning that for each read -> send -> write that occurs
 * within the run loop, those actions will occur in order.
 *
 * Since each script_context has one of these fibers of its own, no one context
 * will wait for work to be finished by another in order to continue making
 * progress. They all operate independently of eachother.
 */
class script_context : public scheduled_task {
public:
    /**
     * class constructor
     * @param script_id Uniquely identifyable id
     * @param ctx Shared state, shared across all script_contexts on a shard
     * @param ntp_ctxs Map of interested ntps, strongly retained by 'this'
     **/
    explicit script_context(script_id, pacemaker_context&, ntp_context_cache&&);

    script_context(const script_context&) = delete;
    script_context(script_context&&) = delete;
    script_context& operator=(script_context&&) = delete;
    script_context& operator=(const script_context&) = delete;

    ~script_context() = default;

    /**
     * Logic of the script_context fiber is implemented within this method
     * Do not explicity call it, rather call 'start()' to begin processing.
     */
    ss::future<> do_task() override;

    /**
     * Shutdown the fiber and release any retained resources
     * @returns future that resolves when the fiber has shut down and all
     *   retained sources relinquished
     */
    ss::future<> shutdown() override;

private:
    std::optional<storage::log_reader_config>
    get_reader(const ss::lw_shared_ptr<ntp_context>&);

    ss::future<std::optional<process_batch_request::data>>
      read_ntp(ss::lw_shared_ptr<ntp_context>);

    ss::future<> process_reply(
      ss::future<result<rpc::client_context<process_batch_reply>>>);

    ss::future<> process_one_reply(process_batch_reply::data);

private:
    /// Max amount of bytes to read from an input log
    static const inline std::size_t _max_batch_size = 32_KiB;

    /// Killswitch for in-process reads
    ss::abort_source _abort_source;

    /// Shared state across all 'script_context'(s)
    pacemaker_context& _ctx;

    /// References to input topics that this script is interested in
    /// receiving updates for
    ntp_context_cache _ntp_ctxs;

    /// Uniquely identifying script id. Generated by coproc engine
    script_id _id;
};
} // namespace coproc
